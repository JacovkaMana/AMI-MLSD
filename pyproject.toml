[project]
name = "ml-ami"
version = "0.1.0"
description = ""
authors = [
    {name = "Jacovkamana",email = "yasha.protasov@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.12,<3.14"
dependencies = [
    "ruff (>=0.11.4,<0.12.0)",
    "pre-commit (>=4.2.0,<5.0.0)",
    "ipykernel (>=6.29.5,<7.0.0)",
    "pandas (>=2.2.3,<3.0.0)",
    "beautifulsoup4 (>=4.13.4,<5.0.0)",
    "loguru (>=0.7.3,<0.8.0)",
    "python-dotenv (>=1.1.0,<2.0.0)",
    "arize-phoenix (>=10.13.1,<11.0.0)",
    "gradio (>=5.34.2,<6.0.0)",
    "locust (>=2.37.10,<3.0.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle (error) - проверка на соответствие стилю кода PEP 8
    "F",  # pyflakes - обнаружение логических ошибок без запуска кода
    "B",  # bugbear - обнаружение потенциальных ошибок и антипаттернов
    "B9", # дополнительные проверки bugbear
    "C4", # flake8-comprehensions - улучшение списковых включений и генераторов
    "SIM", # flake8-simplify - упрощение кода
    "I",  # isort - сортировка импортов
    "UP", # pyupgrade - обновление синтаксиса до новых версий Python
    "PIE", # flake8-pie - различные улучшения кода
    "PGH", # pygrep-hooks - проверки на основе регулярных выражений
    "PYI", # flake8-pyi - проверки для файлов типизации (.pyi)
    "RUF", # правила специфичные для Ruff
]

ignore = [
    "B011", # не проверять использование assert - иногда это необходимо
    "E501"  # игнорировать ошибки длины строки - форматирование решим другими средствами
]