from llm import LLM
from loguru import logger
import os
from dotenv import load_dotenv
import json
from datetime import datetime
from pathlib import Path
from rouge_judge import RougeLJudge

load_dotenv()


class BaseJudge:
    def __init__(self, metric_name, prompt):
        self.metric_name = metric_name
        self.prompt = prompt
        self.llm = LLM(
            temperature=0.2,
            response_format="json_object",
            system_prompt="""
You are an expert evaluator tasked with assessing adventure descriptions generated by a multiagent system based on user queries. Your role is to provide a precise, critical, and objective evaluation using a specific criterion: {Relevance, Creativity, Completeness, Engagement, or Clarity}. You must assign a numerical score from 1 to 100 based on a detailed rubric provided in the evaluation prompt. 

Follow these guidelines:
1. **Be Critical**: Scores above 90 should be reserved for exceptional responses that exceed expectations in every aspect. Average responses should score between 50-70, and poor responses below 50.
2. **Use the Rubric**: Base your score strictly on the provided rubric, ensuring consistency and fairness.
3. **Provide Specific Feedback**: In your explanation, highlight strengths, weaknesses, and specific examples from the text to justify your score.
4. **Avoid Overrating**: Do not give high scores unless the response fully meets or exceeds the rubric criteria.
5. **Context Awareness**: Consider the user query and the intended adventure narrative context when evaluating.
6. **JSON Output**: Return your evaluation in the specified JSON format.

Failure to return valid JSON will be considered an error. Ensure your response is complete, accurate, and strictly adheres to the JSON format.

Your evaluation should help improve the system by identifying precise areas for enhancement.
""",
            model_name="mistral-small-latest",
        )

    def evaluate(self, query, result):
        prompt = self.prompt.replace("__query__", query).replace("__result__", result)

        max_retries = 10
        for attempt in range(max_retries):
            try:
                response = self.llm.complete(prompt)
                return json.loads(response)
            except json.JSONDecodeError as e:
                logger.warning(
                    f"Attempt {attempt + 1} failed to parse JSON response: {e}"
                )
                if attempt == max_retries - 1:
                    raise ValueError(
                        f"Failed to get valid JSON after {max_retries} attempts"
                    )
                continue


class RelevanceJudge(BaseJudge):
    def __init__(self):
        super().__init__(
            "relevance",
            f"""Given the query: __query__, evaluate the relevance of the adventure description: __result__.
Relevance measures how well the description aligns with the query's intent, setting, and requested elements.

**Rubric**:
- 90-100: The description perfectly matches the query, including all specified elements (e.g., setting, goal, tone) with no irrelevant details.
- 70-89: The description aligns well with the query but may include minor irrelevant details or miss subtle aspects of the intent.
- 50-69: The description partially aligns with the query, addressing the main idea but missing key elements or including noticeable irrelevant content.
- 30-49: The description has significant deviations from the query, with major elements missing or irrelevant additions.
- Below 30: The description is largely unrelated to the query.

Provide a numerical score (1-100) and an explanation that includes:
- How well the description Ascertain whether the description matches the query's requested setting, characters, or objectives.
- Specific examples of alignment or deviation.
- Suggestions for improvement if applicable.

Return JSON format:
{{
    "score": int,
    "explanation": str
}}""",
        )


class CreativityJudge(BaseJudge):
    def __init__(self):
        super().__init__(
            "creativity",
            f"""Given the query: __query__, evaluate the creativity of the adventure description: __result__.
Creativity measures the originality, vividness, and uniqueness of the narrative elements, imagery, and ideas in the description.

**Rubric**:
- 90-100: The description introduces highly original ideas, unique imagery, or unexpected narrative twists that enhance the adventure, fully aligned with the query.
- 70-89: The description includes some original elements or vivid imagery but may rely on familiar tropes or lack bold innovation.
- 50-69: The description is functional but relies heavily on generic or clichéd elements, lacking significant originality.
- 30-49: The description is repetitive or overly derivative, with minimal creative effort.
- Below 30: The description lacks any notable creativity, feeling formulaic or uninspired.

Provide a numerical score (1-100) and an explanation that includes:
- Specific examples of creative or unoriginal elements (e.g., unique metaphors, novel plot points, or clichéd phrases).
- How the creativity enhances or detracts from the adventure.
- Suggestions for more innovative approaches if applicable.

Return JSON format:
{{
    "score": int,
    "explanation": str
}}""",
        )


class CompletenessJudge(BaseJudge):
    def __init__(self):
        super().__init__(
            "completeness",
            f"""Given the query: __query__, evaluate the completeness of the adventure description: __result__.
Completeness measures whether the description fully addresses all aspects of the query, including setting, characters, objectives, and any implied context, without leaving gaps.

**Rubric**:
- 90-100: The description fully covers all query elements (setting, characters, objectives) with rich detail and no significant omissions.
- 70-89: The description covers most query elements but may lack depth in one or two aspects or include minor gaps.
- 50-69: The description misses some key query elements or lacks sufficient detail to feel complete.
- 30-49: The description omits major elements of the query, leaving the narrative incomplete or unbalanced.
- Below 30: The description fails to address most query elements, resulting in an incomplete narrative.

Provide a numerical score (1-100) and an explanation that includes:
- Which query elements were addressed or omitted.
- How omissions or lack of detail impact the narrative.
- Suggestions for including missing elements if applicable.

Return JSON format:
{{
    "score": int,
    "explanation": str
}}""",
        )


class EngagementJudge(BaseJudge):
    def __init__(self):
        super().__init__(
            "engagement",
            f"""Given the query: __query__, evaluate the engagement of the adventure description: __result__.
Engagement measures how immersive, compelling, and emotionally captivating the description is, drawing the reader into the adventure.

**Rubric**:
- 90-100: The description is highly immersive, with vivid sensory details, strong emotional hooks, and a compelling narrative that grips the reader.
- 70-89: The description is engaging but may lack intensity in emotional or sensory impact, slightly reducing immersion.
- 50-69: The description is moderately engaging but feels flat or fails to evoke strong emotions or immersion.
- 30-49: The description is minimally engaging, with weak sensory details or narrative hooks that fail to captivate.
- Below 30: The description is dull, failing to draw the reader into the adventure.

Provide a numerical score (1-100) and an explanation that includes:
- Specific examples of engaging elements (e.g., vivid imagery, emotional stakes) or areas where engagement falls short.
- How the description affects the reader’s immersion.
- Suggestions for improving engagement if applicable.

Return JSON format:
{{
    "score": int,
    "explanation": str
}}""",
        )


class ClarityJudge(BaseJudge):
    def __init__(self):
        super().__init__(
            "clarity",
            f"""Given the query: __query__, evaluate the clarity of the adventure description: __result__.
Clarity measures how clear, coherent, and easy to understand the description is, ensuring the narrative is accessible and well-structured.

**Rubric**:
- 90-100: The description is crystal clear, with concise language, logical flow, and no ambiguity in the narrative or setting.
- 70-89: The description is mostly clear but may have minor ambiguities or overly complex phrasing that slightly hinders understanding.
- 50-69: The description has noticeable clarity issues, such as vague descriptions, disjointed structure, or confusing details.
- 30-49: The description is often unclear, with significant ambiguity or poor structure that obscures the narrative.
- Below 30: The description is highly confusing, making it difficult to follow the setting, characters, or objectives.

Provide a numerical score (1-100) and an explanation that includes:
- Specific examples of clear or unclear elements (e.g., precise descriptions vs. vague phrasing).
- How clarity affects the reader’s understanding of the adventure.
- Suggestions for improving clarity if applicable.

Return JSON format:
{{
    "score": int,
    "explanation": str
}}""",
        )


class Evaluator:
    def __init__(self):
        self.judges = {
            "relevance": RelevanceJudge(),
            "creativity": CreativityJudge(),
            "completeness": CompletenessJudge(),
            "engagement": EngagementJudge(),
            "clarity": ClarityJudge(),
            "rouge_l": RougeLJudge(),
        }

    def evaluate(self, query, result, reference_dataset=None):
        evaluations = {}
        for name, judge in self.judges.items():
            if name == "rouge_l":
                evaluation = judge.evaluate(query, result, reference_dataset)
            else:
                evaluation = judge.evaluate(query, result)
            evaluations[name] = evaluation
        return evaluations


if __name__ == "__main__":
    # Simple test case
    evaluator = Evaluator()
    test_eval = evaluator.evaluate("Test query", "Test result")
    logger.info(f"Test evaluation: {test_eval}")
